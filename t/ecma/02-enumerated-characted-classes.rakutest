use v6.d;
use lib 't/ecma';
use Test;
use Support;

is ecma2raku('.'), '/<-[\n]>/', 'Wildcard';
is ecma2raku('a[]'), '/a/', 'Empty character class'; # null regex not allowed, so test uses single outside token
is ecma2raku('[a]'), '/<+[a]>/', 'Single literal character class';
is ecma2raku('[^a]'), '/<-[a]>/', 'Single literal negated character class';
is ecma2raku('[a-z]'), '/<+[a..z]>/', 'Simple range character class';
is ecma2raku('[^a-z]'), '/<-[a..z]>/', 'Simple range negated character class';
is ecma2raku('[a-zA-Z]'), '/<+[a..z]+[A..Z]>/', 'Double range character class';
is ecma2raku('[^a-zA-Z]'), '/<-[a..z]-[A..Z]>/', 'Double range negated character class';
is ecma2raku('[\\d]'), '/<+[0..9]>/', 'Digit class';
is ecma2raku('[\\D]'), '/<-[0..9]>/', 'Not-digit class';
is ecma2raku('[^\\d]'), '/<-[0..9]>/', 'Negated Digit class';
is ecma2raku('[^\\D]'), '/<+[0..9]>/', 'Negated Not-digit class';
is ecma2raku('[\\w]'), '/<+[a..zA..Z_-]>/', 'Wordchar class';
is ecma2raku('[\\W]'), '/<-[a..zA..Z_-]>/', 'Not-wordchar class';
is ecma2raku('[^\\w]'), '/<-[a..zA..Z_-]>/', 'Negated Wordchar class';
is ecma2raku('[^\\W]'), '/<+[a..zA..Z_-]>/', 'Negated Not-wordchar class';
is ecma2raku('[\\s]'), '/<+[\\x9\\xb\\xc]+:Zs+[\\xFEFF]>/', 'Space class';
is ecma2raku('[\\S]'), '/<-[\\x9\\xb\\xc]-:Zs-[\\xFEFF]>/', 'Not-space class';
is ecma2raku('[^\\s]'), '/<-[\\x9\\xb\\xc]-:Zs-[\\xFEFF]>/', 'Negated Space class';
is ecma2raku('[^\\S]'), '/<+[\\x9\\xb\\xc]+:Zs+[\\xFEFF]>/', 'Negated Not-space class';
is ecma2raku('[\\cA-\\cF]'), '/<+[\x1 ..\x6 ]>/', 'Simple range character class via control escapes)';
is ecma2raku('[\\x61-\\x7a]'), '/<+[\x61 ..\x7a ]>/', 'Simple range character class via hex escapes)';
is ecma2raku('[\\u0061-\\u007a]'), '/<+[\x0061 ..\x007a ]>/', 'Simple range character class via unicode escapes)';
is ecma2raku('[!#$%&]'), '/<+[\!]+[\#]+[\$]+[\%]+[\&]>/', 'Multiple enumerated and escaped characters';

done-testing;